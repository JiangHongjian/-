多处最优服务次序问题
问题：

设有N个顾客同时等待一项服务，顾客i需要的服务时间为ti（1<=i<=N）共有S处可以提供此项服务，

应如何安排N个顾客需要的服务次序才能使平均等待时间达到最小？平均等待时间等于N个顾客等待服务的总时间除以N。

输入：

第一行两个正整数N和S表示N个顾客S处服务，接下来N个顾客需要的服务时间

输出：
平均等待时间，保留3位小数。
输入样例：
10 2
56 12 1 99 1000 23433 55 99 812
输出样例：
336.000
顾客的等待时间n个顾客，s个服务取n个顾客做药服务的时间，求平均等待是时间达到最小（服务时间从小到大排序）

#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
using namespace std;
int main()
{
    int i,n,j,k,minx;//n为顾客数量
    int s;//工作岗位
    double t;//服务时间
    int a[10005],b[1005];
    while(cin>>n>>s) // 输入顾客数量和可供等待的工位 
    {
        for(i=0; i<n; i++)
            cin>>a[i]; //输入顾客使用时间数组 
        sort(a,a+n); //将数组从小到大排序 
        memset(b,0,sizeof(b)); // 将b中的数组初始化为0
        for(i=0; i<n; i++) //遍历顾客的等待时间 
        {
            minx=0x7fffffff; //定义一个非常大的数 
            k=0; // 
            for(j=0; j<s; j++)  //有几个工位 进行几次循环 j作为变量存储对应的工位
            {
                if(minx>b[j]) // 这个和上个小的进行对比 
                {
                    minx=b[j]; //记录小的 
                    k=j; //用k来记录小的对应的工位 
                }
            }
            b[k]+=a[i]; // b[k] = b[k] + a[i]  记录每个工位的总时间 
            a[i]=b[k];  // 把每个工位的时间赋给对应顾客 形成 顾客总时间数组 
        }
        t=0;
        for(i=0; i<n; i++) // 计算顾客平均等待时间 
            t+=a[i];
        t/=n; //t/n个顾客的时间
        printf("%d\n",(int)(t));
    }
    return 0;
}
