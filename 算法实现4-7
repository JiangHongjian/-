设有n个顾客同时等待一项服务，顾客i需要的服务时间为ti，1≤i≤n，共有s处可以提供此项服务。应如何安排n个顾客的服务次序才能使平均等待时间达到最小？平均等待时间是n个顾客等待服务时间的总和除以n。

¢ 给定的n个顾客需要的服务时间和s的值，编程计算最优服务次序。

¢ 输入
第一行有2个正整数n和s，表示有n个顾客且有s处可以提供顾客需要的服务。接下来的1行中，有n个正整数，表示n个顾客需要的服务时间。

¢ 输出
最小平均等待时间，输出保留3位小数。

输入样例
10 2

56 12 1 99 1000 234 33 55 99 812

输出样例
336.00


#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
using namespace std;

int main()
{
    int i,n,j,k,minx;
    int s;
    double t;
    int a[10005],b[1005];
    while(cin>>n>>s) // 输入顾客数量和可供等待的工位 
    {
        for(i=0; i<n; i++)
            cin>>a[i]; //输入顾客使用时间数组 
        sort(a,a+n); //将数组从小到大排序 
        memset(b,0,sizeof(b)); // 将b中的数组初始化为0
        for(i=0; i<n; i++) //遍历顾客的等待时间 
        {
            minx=0x7fffffff; //定义一个非常大的数 
            k=0; // 
            for(j=0; j<s; j++)  //有几个工位 进行几次循环 
            {
                if(minx>b[j]) // 这个和上个小的进行对比 
                {
                    minx=b[j]; //记录小的 
                    k=j; //记录小的对应的工位 
                }
            }
            b[k]+=a[i]; // b[k] = b[k] + a[i]  记录每个工位的总时间 
            a[i]=b[k];  // 把每个工位的时间赋给对应顾客 形成 顾客总时间数组 
        }
        t=0;
        for(i=0; i<n; i++) // 计算顾客平均等待时间 
            t+=a[i];
        t/=n;
        printf("%d\n",(int)(t));
    }

    return 0;

}
